Index: antigatela.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom truco_game import Match, Player, Pair, Hand, Card, Game, Match # Importando as classes Match, Player, Pair, Hand, Card e Game do truco_game\r\nfrom truco_regras import TestGame, game  # Importando a classe Game do truco_test\r\n\r\n'''Linha de janela de comando para rodar o programa:\r\n\r\nTrucoJogador: python aiketruco_main.py\r\nTrucoCartas: python aiketruco_main.py cartas\r\nTrucoRodadas: python aiketruco_main.py rodadas\r\nTrucoPlacar: python aiketruco_main.py placar\r\n\r\n'''\r\n\r\nclass TrucoJogador:\r\n    def __init__(self, master):\r\n        self.master = master\r\n        master.title(\"Truco Game\")\r\n\r\n        self.player_names = []\r\n        self.players = []  # Lista para armazenar os jogadores\r\n\r\n        self.label = tk.Label(master, text=\"Digite os nomes dos jogadores (mínimo 2):\", font=(\"times\", 15), fg=\"red\")\r\n        self.label.pack()\r\n\r\n        self.entry = tk.Entry(master)\r\n        self.entry.pack()\r\n\r\n        self.add_button = tk.Button(master, text=\"Adicionar Jogador\", command=self.add_player)\r\n        self.add_button.pack()\r\n\r\n        self.remove_button = tk.Button(master, text=\"Remover Jogador\", command=self.remove_player)\r\n        self.remove_button.pack()\r\n\r\n        self.label_players = tk.Label(master, text=\"Jogadores adicionados:\", font=(\"times\", 15), fg=\"red\")\r\n        self.label_players.pack()\r\n\r\n        self.listbox_players = tk.Listbox(master)\r\n        self.listbox_players.pack()\r\n\r\n        self.start_button = tk.Button(master, text=\"Iniciar Jogo\", command=self.start_game)\r\n        self.start_button.pack()\r\n\r\n    def add_player(self):\r\n        player_name = self.entry.get()\r\n        if player_name not in self.player_names:\r\n            self.player_names.append(player_name)\r\n            self.entry.delete(0, tk.END)\r\n            self.listbox_players.insert(tk.END, player_name)  \r\n            print(f\"Jogador {player_name} adicionado\")\r\n        else:\r\n            print(f\"O jogador {player_name} já está na lista.\")\r\n\r\n    def remove_player(self):\r\n        player_name = self.entry.get()\r\n        if player_name in self.player_names:\r\n            self.player_names.remove(player_name)\r\n            self.entry.delete(0, tk.END)\r\n            self.show_players()\r\n            print(f\"Jogador {player_name} removido\")\r\n        else:\r\n            print(f\"Jogador {player_name} não encontrado\")\r\n\r\n    def show_players(self):\r\n        self.listbox_players.delete(0, tk.END)\r\n        for player in self.player_names:\r\n            self.listbox_players.insert(tk.END, player)\r\n\r\n    def start_game(self):\r\n        if len(self.player_names) >= 2:\r\n            self.players = [Player(name, Hand([])) for name in self.player_names]  # Passa uma mão vazia para cada jogador\r\n            game = TestGame()  # Instanciando a classe Game do truco_test\r\n            self.play_game(game)\r\n            self.master.destroy()\r\n        else:\r\n            print(\"É necessário adicionar pelo menos dois jogadores para iniciar o jogo.\")\r\n\r\n\r\n    def play_game(self, game):\r\n        while True:\r\n            match = game.current_match\r\n            match = Match(game)  # Inicialize a instância de Match aqui\r\n            for player in self.players:\r\n                self.play_player(player, match)\r\n\r\n            end_game = game.score[Pair.PAIR_ONE_ID] >= 12 or game.score[Pair.PAIR_TWO_ID] >= 12\r\n\r\n            if end_game:\r\n                break\r\n\r\n        print(\"\\t\\t Fim do jogo!\\n\")\r\n        print(\"Placar final: \" + str(game.score[Pair.PAIR_ONE_ID]) + \" x \" + str(game.score[Pair.PAIR_TWO_ID]) + \"\\n\")\r\n\r\n    def play_player(self, player, match):\r\n        while True:\r\n            print(\"\\nVez de \" + player.player_name + \"\\n\")\r\n\r\n            if player.hand is None:\r\n                print(\"Erro: Mão do jogador não está inicializada.\")\r\n                return  # Exit the function if there's no hand\r\n\r\n            indexes = []\r\n            for index, card in enumerate(player.hand.cards):\r\n                indexes.append(index + 1)\r\n                print(str(index + 1) + \" - \" + str(card))\r\n\r\n            while True:\r\n                card_input = input(\"\\nEscolha o número correspondente à carta que deseja jogar: \")\r\n                if card_input.isdigit():\r\n                    card_index = int(card_input) - 1  # Subtraia 1 porque os índices da lista começam em 0\r\n                    if 0 <= card_index < len(player.hand.cards):\r\n                        # O número está dentro do intervalo válido, saia do loop\r\n                        break\r\n                print(\"Erro: Número fora da faixa válida. Por favor, tente novamente.\")\r\n\r\n                players = self.players\r\n            for player in players:\r\n                player.hand = None\r\n\r\n            print(\"\\n\" + match.winner.player_name + \" venceu a rodada!\\n\")\r\n            print(\"Placar: \" + str(game.score[Pair.PAIR_ONE_ID]) + \" x \" + str(game.score[Pair.PAIR_TWO_ID]) + \"\\n\")\r\n\r\nclass TrucoJogarCartas:\r\n    def __init__(self, master, player_names):\r\n        self.master = master\r\n        master.title(\"Truco Game - Jogar Cartas\")\r\n\r\n        self.player_names = player_names\r\n        self.players = []  # Lista para armazenar os jogadores\r\n\r\n        self.label_cards = tk.Label(master, text=\"Cartas de cada jogador:\", font=(\"times\", 15), fg=\"red\")\r\n        self.label_cards.pack()\r\n\r\n        self.listbox_players = tk.Listbox(master)\r\n        self.listbox_players.pack()\r\n\r\n        self.show_cards()\r\n\r\n    def show_cards(self):\r\n        self.listbox_players.delete(0, tk.END)\r\n        for player_name in self.player_names:\r\n            self.listbox_players.insert(tk.END, f\"Cartas de {player_name}:\")\r\n            # Simulando cartas aleatórias para cada jogador\r\n            cards = [\"Carta 1\", \"Carta 2\", \"Carta 3\"]\r\n            for card in cards:\r\n                self.listbox_players.insert(tk.END, card)\r\n\r\n\r\nclass TrucoCartas:\r\n    def __init__(self, master, player_names):\r\n        self.master = master\r\n        master.title(\"Truco Game - Cartas\")\r\n\r\n        self.player_names = player_names\r\n        self.players = []  # Lista para armazenar os jogadores\r\n\r\n        self.label_cards = tk.Label(master, text=\"Cartas de cada jogador:\", font=(\"times\", 15), fg=\"red\")\r\n        self.label_cards.pack()\r\n\r\n        self.listbox_players = tk.Listbox(master)\r\n        self.listbox_players.pack()\r\n\r\n        self.show_cards()\r\n\r\n    def show_cards(self):\r\n        self.listbox_players.delete(0, tk.END)\r\n        for player_name in self.player_names:\r\n            self.listbox_players.insert(tk.END, f\"Cartas de {player_name}:\")\r\n            # Simulando cartas aleatórias para cada jogador\r\n            cards = [\"Carta 1\", \"Carta 2\", \"Carta 3\"]\r\n            for card in cards:\r\n                self.listbox_players.insert(tk.END, card)\r\n\r\nclass TrucoRodadas:\r\n    def __init__(self, master, player_names):\r\n        self.master = master\r\n        master.title(\"Truco Game - Rodadas\")\r\n\r\n        self.player_names = player_names\r\n        self.players = []  # Lista para armazenar os jogadores\r\n\r\n        self.label_rounds = tk.Label(master, text=\"Rodadas de cada jogador:\", font=(\"times\", 15), fg=\"red\")\r\n        self.label_rounds.pack()\r\n\r\n        self.listbox_players = tk.Listbox(master)\r\n        self.listbox_players.pack()\r\n\r\n        self.show_rounds()\r\n\r\n    def show_rounds(self):\r\n        self.listbox_players.delete(0, tk.END)\r\n        for player_name in self.player_names:\r\n            self.listbox_players.insert(tk.END, f\"Rodadas de {player_name}:\")\r\n            # Simulando rodadas aleatórias para cada jogador\r\n            rounds = [\"Rodada 1\", \"Rodada 2\", \"Rodada 3\"]\r\n            for round in rounds:\r\n                self.listbox_players.insert(tk.END, round)\r\n\r\n\r\nclass TrucoPlacar:\r\n    def __init__(self, master, score):\r\n        self.master = master\r\n        master.title(\"Truco Game - Placar\")\r\n\r\n        self.score = score\r\n\r\n        self.label_score = tk.Label(master, text=\"Placar:\", font=(\"times\", 15), fg=\"red\")\r\n        self.label_score.pack()\r\n\r\n        self.label_score = tk.Label(master, text=f\"Placar: {score[Pair.PAIR_ONE_ID]} x {score[Pair.PAIR_TWO_ID]}\", font=(\"times\", 15), fg=\"red\")\r\n        self.label_score.pack()\r\n\r\n\r\n\r\n'''Linha de janela de comando para rodar o programa:\r\n\r\nTrucoJogador: python aiketruco_main.py\r\nTrucoJogarCartas: python aiketruco_main.py cartas\r\nTrucoCartas: python aiketruco_main.py cartas\r\nTrucoRodadas: python aiketruco_main.py rodadas\r\nTrucoPlacar: python aiketruco_main.py placar\r\n\r\n'''\r\n\r\ndef main():\r\n    import sys\r\n    if len(sys.argv) > 1:\r\n        if sys.argv[1] == \"cartas\":\r\n            player_names = [\"Jogador 1\", \"Jogador 2\", \"Jogador 3\", \"Jogador 4\"]\r\n            root = tk.Tk()\r\n            my_gui = TrucoCartas(root, player_names)\r\n            root.mainloop()\r\n        elif sys.argv[1] == \"rodadas\":\r\n            player_names = [\"Jogador 1\", \"Jogador 2\", \"Jogador 3\", \"Jogador 4\"]\r\n            root = tk.Tk()\r\n            my_gui = TrucoRodadas(root, player_names)\r\n            root.mainloop()\r\n        elif sys.argv[1] == \"placar\":\r\n            score = [6, 9]\r\n            root = tk.Tk()\r\n            my_gui = TrucoPlacar(root, score)\r\n            root.mainloop()\r\n    else:\r\n        root = tk.Tk()\r\n        my_gui = TrucoJogador(root)\r\n        root.mainloop()\r\nif __name__ == \"__main__\":\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/antigatela.py b/antigatela.py
--- a/antigatela.py	(revision 7fa5cde1421c15adb3d08e2b5e55b117a1640647)
+++ b/antigatela.py	(date 1714661002097)
@@ -1,29 +1,33 @@
 import tkinter as tk
-from truco_game import Match, Player, Pair, Hand, Card, Game, Match # Importando as classes Match, Player, Pair, Hand, Card e Game do truco_game
-from truco_regras import TestGame, game  # Importando a classe Game do truco_test
+from truco_game import Pair, Hand, CardCheck, Card, Player, Match
+from truco_regras import TestGame
 
-'''Linha de janela de comando para rodar o programa:
 
-TrucoJogador: python aiketruco_main.py
-TrucoCartas: python aiketruco_main.py cartas
-TrucoRodadas: python aiketruco_main.py rodadas
-TrucoPlacar: python aiketruco_main.py placar
+class Match:
+    def __init__(self, players):
+        self.players = players
+        self.score = {Pair.PAIR_ONE_ID: 0, Pair.PAIR_TWO_ID: 0}
+        self.rounds = []
+        self.winner = None
 
-'''
+    def is_over(self):
+        return self.score[Pair.PAIR_ONE_ID] == 2 or self.score[Pair.PAIR_TWO_ID] == 2
+
 
 class TrucoJogador:
     def __init__(self, master):
         self.master = master
-        master.title("Truco Game")
+        master.title("Truco Game - Jogadores")
 
         self.player_names = []
-        self.players = []  # Lista para armazenar os jogadores
+        self.players = []
 
-        self.label = tk.Label(master, text="Digite os nomes dos jogadores (mínimo 2):", font=("times", 15), fg="red")
-        self.label.pack()
+        self.player_name_label = tk.Label(master, text="Digite o nome dos jogadores (mínimo 2):", font=("times", 15),
+                                          fg="red")
+        self.player_name_label.pack()
 
-        self.entry = tk.Entry(master)
-        self.entry.pack()
+        self.player_name_entry = tk.Entry(master)
+        self.player_name_entry.pack()
 
         self.add_button = tk.Button(master, text="Adicionar Jogador", command=self.add_player)
         self.add_button.pack()
@@ -31,93 +35,116 @@
         self.remove_button = tk.Button(master, text="Remover Jogador", command=self.remove_player)
         self.remove_button.pack()
 
-        self.label_players = tk.Label(master, text="Jogadores adicionados:", font=("times", 15), fg="red")
-        self.label_players.pack()
+        self.player_list_label = tk.Label(master, text="Jogadores adicionados:", font=("times", 15), fg="red")
+        self.player_list_label.pack()
 
-        self.listbox_players = tk.Listbox(master)
-        self.listbox_players.pack()
+        self.player_listbox = tk.Listbox(master)
+        self.player_listbox.pack()
 
         self.start_button = tk.Button(master, text="Iniciar Jogo", command=self.start_game)
         self.start_button.pack()
 
     def add_player(self):
-        player_name = self.entry.get()
+        player_name = self.player_name_entry.get()
         if player_name not in self.player_names:
             self.player_names.append(player_name)
-            self.entry.delete(0, tk.END)
-            self.listbox_players.insert(tk.END, player_name)  
+            self.player_name_entry.delete(0, tk.END)
+            self.show_players()
             print(f"Jogador {player_name} adicionado")
         else:
-            print(f"O jogador {player_name} já está na lista.")
+            print(f"Jogador {player_name} já adicionado")
 
     def remove_player(self):
-        player_name = self.entry.get()
+        player_name = self.player_name_entry.get()
         if player_name in self.player_names:
             self.player_names.remove(player_name)
-            self.entry.delete(0, tk.END)
+            self.player_name_entry.delete(0, tk.END)
             self.show_players()
             print(f"Jogador {player_name} removido")
         else:
             print(f"Jogador {player_name} não encontrado")
 
     def show_players(self):
-        self.listbox_players.delete(0, tk.END)
+        self.player_listbox.delete(0, tk.END)
         for player in self.player_names:
-            self.listbox_players.insert(tk.END, player)
+            self.player_listbox.insert(tk.END, player)
 
     def start_game(self):
-        if len(self.player_names) >= 2:
-            self.players = [Player(name, Hand([])) for name in self.player_names]  # Passa uma mão vazia para cada jogador
-            game = TestGame()  # Instanciando a classe Game do truco_test
-            self.play_game(game)
-            self.master.destroy()
-        else:
-            print("É necessário adicionar pelo menos dois jogadores para iniciar o jogo.")
+        if len(self.player_names) < 2:
+            print("Número de jogadores insuficiente.")
+            return
+
+        self.players = [Player(name) for name in self.player_names]
+        game = TestGame(self.players)
+        self.play_game(game)
 
+    def start_match(self):
+        match = Match(self.players)
+        return match
 
     def play_game(self, game):
-        while True:
-            match = game.current_match
-            match = Match(game)  # Inicialize a instância de Match aqui
-            for player in self.players:
+        print("Iniciando jogo.")
+        print("Placar do jogo:")
+        print(f"Equipe 1: {game.score[Pair.PAIR_ONE_ID]}")
+        print(f"Equipe 2: {game.score[Pair.PAIR_TWO_ID]}")
+        print()
+        while not game.is_over():
+            match = self.start_match()
+            self.play_match(match)
+        print("O jogo acabou.")
+        print(f"Vencedor do jogo: {game.winner.name}")
+        print("Placar do jogo:")
+        print(f"Equipe 1: {game.score[Pair.PAIR_ONE_ID]}")
+        print(f"Equipe 2: {game.score[Pair.PAIR_TWO_ID]}")
+        print()
+
+    def play_player(self, player, match):
+        print(f"Vez de {player.name} jogar.")
+        print("Cartas disponíveis:")
+        for i, card in enumerate(player.hand.cards):
+            print(f"{i + 1}: {card}")
+        card_index = int(input("Digite o número da carta que deseja jogar: ")) - 1
+        if not player.hand.cards(card_index):
+            print("Número de carta inválido.")
+            return
+        card = player.hand.cards.pop(card_index)
+        match.play_card(player, card)
+        print(f"{player.name} jogou {card}.")
+
+        if match.is_over():
+            print("A rodada acabou.")
+            print(f"Vencedor da rodada: {match.winner.name}")
+            print("Placar da partida:")
+            print(f"Equipe 1: {match.score[Pair.PAIR_ONE_ID]}")
+            print(f"Equipe 2: {match.score[Pair.PAIR_TWO_ID]}")
+
+
+        else:
+            print("A rodada continua.")
+            print(f"Vez do próximo jogador.")
+        print()
+
+    def play_match(self, match):
+        print("Iniciando partida.")
+        print("Placar da partida:")
+        print(f"Equipe 1: {match.score[Pair.PAIR_ONE_ID]}")
+        print(f"Equipe 2: {match.score[Pair.PAIR_TWO_ID]}")
+        print()
+
+        while not match.is_over():
+            for player in match.players:
                 self.play_player(player, match)
 
-            end_game = game.score[Pair.PAIR_ONE_ID] >= 12 or game.score[Pair.PAIR_TWO_ID] >= 12
-
-            if end_game:
-                break
-
-        print("\t\t Fim do jogo!\n")
-        print("Placar final: " + str(game.score[Pair.PAIR_ONE_ID]) + " x " + str(game.score[Pair.PAIR_TWO_ID]) + "\n")
-
-    def play_player(self, player, match):
-        while True:
-            print("\nVez de " + player.player_name + "\n")
-
-            if player.hand is None:
-                print("Erro: Mão do jogador não está inicializada.")
-                return  # Exit the function if there's no hand
+        print("A partida acabou.")
+        print(f"Vencedor da partida: {match.winner.name}")
+        print("Placar da partida:")
+        print(f"Equipe 1: {match.score[Pair.PAIR_ONE_ID]}")
+        print(f"Equipe 2: {match.score[Pair.PAIR_TWO_ID]}")
+        print()
 
-            indexes = []
-            for index, card in enumerate(player.hand.cards):
-                indexes.append(index + 1)
-                print(str(index + 1) + " - " + str(card))
+        print("Iniciando nova partida.")
+        print()
 
-            while True:
-                card_input = input("\nEscolha o número correspondente à carta que deseja jogar: ")
-                if card_input.isdigit():
-                    card_index = int(card_input) - 1  # Subtraia 1 porque os índices da lista começam em 0
-                    if 0 <= card_index < len(player.hand.cards):
-                        # O número está dentro do intervalo válido, saia do loop
-                        break
-                print("Erro: Número fora da faixa válida. Por favor, tente novamente.")
-
-                players = self.players
-            for player in players:
-                player.hand = None
-
-            print("\n" + match.winner.player_name + " venceu a rodada!\n")
-            print("Placar: " + str(game.score[Pair.PAIR_ONE_ID]) + " x " + str(game.score[Pair.PAIR_TWO_ID]) + "\n")
 
 class TrucoJogarCartas:
     def __init__(self, master, player_names):
@@ -125,7 +152,7 @@
         master.title("Truco Game - Jogar Cartas")
 
         self.player_names = player_names
-        self.players = []  # Lista para armazenar os jogadores
+        self.players = []
 
         self.label_cards = tk.Label(master, text="Cartas de cada jogador:", font=("times", 15), fg="red")
         self.label_cards.pack()
@@ -139,7 +166,6 @@
         self.listbox_players.delete(0, tk.END)
         for player_name in self.player_names:
             self.listbox_players.insert(tk.END, f"Cartas de {player_name}:")
-            # Simulando cartas aleatórias para cada jogador
             cards = ["Carta 1", "Carta 2", "Carta 3"]
             for card in cards:
                 self.listbox_players.insert(tk.END, card)
@@ -151,7 +177,7 @@
         master.title("Truco Game - Cartas")
 
         self.player_names = player_names
-        self.players = []  # Lista para armazenar os jogadores
+        self.players = []
 
         self.label_cards = tk.Label(master, text="Cartas de cada jogador:", font=("times", 15), fg="red")
         self.label_cards.pack()
@@ -165,18 +191,18 @@
         self.listbox_players.delete(0, tk.END)
         for player_name in self.player_names:
             self.listbox_players.insert(tk.END, f"Cartas de {player_name}:")
-            # Simulando cartas aleatórias para cada jogador
             cards = ["Carta 1", "Carta 2", "Carta 3"]
             for card in cards:
                 self.listbox_players.insert(tk.END, card)
 
+
 class TrucoRodadas:
     def __init__(self, master, player_names):
         self.master = master
         master.title("Truco Game - Rodadas")
 
         self.player_names = player_names
-        self.players = []  # Lista para armazenar os jogadores
+        self.players = []
 
         self.label_rounds = tk.Label(master, text="Rodadas de cada jogador:", font=("times", 15), fg="red")
         self.label_rounds.pack()
@@ -190,58 +216,42 @@
         self.listbox_players.delete(0, tk.END)
         for player_name in self.player_names:
             self.listbox_players.insert(tk.END, f"Rodadas de {player_name}:")
-            # Simulando rodadas aleatórias para cada jogador
             rounds = ["Rodada 1", "Rodada 2", "Rodada 3"]
             for round in rounds:
                 self.listbox_players.insert(tk.END, round)
 
 
 class TrucoPlacar:
-    def __init__(self, master, score):
+    def __init__(self, master, score, player_names):
         self.master = master
+        self.score = score
+        self.player_names = player_names
+        self.players = [Player(name) for name in self.player_names]
         master.title("Truco Game - Placar")
 
-        self.score = score
-
-        self.label_score = tk.Label(master, text="Placar:", font=("times", 15), fg="red")
-        self.label_score.pack()
+    def start_game(self):
+        self.players = [Player(name) for name in self.player_names]
+        game = TestGame()
 
-        self.label_score = tk.Label(master, text=f"Placar: {score[Pair.PAIR_ONE_ID]} x {score[Pair.PAIR_TWO_ID]}", font=("times", 15), fg="red")
-        self.label_score.pack()
 
+if __name__ == "__main__":
+    root = tk.Tk()
+    my_gui = TrucoJogador(root)
+    root.mainloop()
 
-
-'''Linha de janela de comando para rodar o programa:
-
-TrucoJogador: python aiketruco_main.py
-TrucoJogarCartas: python aiketruco_main.py cartas
-TrucoCartas: python aiketruco_main.py cartas
-TrucoRodadas: python aiketruco_main.py rodadas
-TrucoPlacar: python aiketruco_main.py placar
-
-'''
-
-def main():
-    import sys
-    if len(sys.argv) > 1:
-        if sys.argv[1] == "cartas":
-            player_names = ["Jogador 1", "Jogador 2", "Jogador 3", "Jogador 4"]
-            root = tk.Tk()
-            my_gui = TrucoCartas(root, player_names)
-            root.mainloop()
-        elif sys.argv[1] == "rodadas":
-            player_names = ["Jogador 1", "Jogador 2", "Jogador 3", "Jogador 4"]
-            root = tk.Tk()
-            my_gui = TrucoRodadas(root, player_names)
-            root.mainloop()
-        elif sys.argv[1] == "placar":
-            score = [6, 9]
-            root = tk.Tk()
-            my_gui = TrucoPlacar(root, score)
-            root.mainloop()
-    else:
-        root = tk.Tk()
-        my_gui = TrucoJogador(root)
-        root.mainloop()
-if __name__ == "__main__":
-    main()
+    root = tk.Tk()
+    my_gui = TrucoJogarCartas(root, ["Jogador 1", "Jogador 2", "Jogador 3", "Jogador 4"])
+    root.mainloop()
+
+    root = tk.Tk()
+    my_gui = TrucoCartas(root, ["Jogador 1", "Jogador 2", "Jogador 3", "Jogador 4"])
+    root.mainloop()
+
+    root = tk.Tk()
+    my_gui = TrucoRodadas(root, ["Jogador 1", "Jogador 2", "Jogador 3", "Jogador 4"])
+    root.mainloop()
+
+    root = tk.Tk()
+    my_gui = TrucoPlacar(root, [0, 0], ["Jogador 1", "Jogador 2", "Jogador 3", "Jogador 4"])
+    root.mainloop()
+
Index: aiketruco_main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom truco_game import Pair, Hand, CardCheck, Card, Player, Match\r\nfrom truco_regras import TestGame\r\n\r\n\r\nclass Match:\r\n    def __init__(self, players):\r\n        self.players = players\r\n        self.score = {Pair.PAIR_ONE_ID: 0, Pair.PAIR_TWO_ID: 0}\r\n        self.rounds = []\r\n        self.winner = None\r\n    \r\n    def is_over(self):\r\n        return self.score[Pair.PAIR_ONE_ID] == 2 or self.score[Pair.PAIR_TWO_ID] == 2\r\n\r\nclass TrucoJogador:\r\n    def __init__(self, master):\r\n        self.master = master\r\n        master.title(\"Truco Game - Jogadores\")\r\n\r\n        self.player_names = []\r\n        self.players = []\r\n\r\n        self.player_name_label = tk.Label(master, text=\"Digite o nome dos jogadores (mínimo 2):\", font=(\"times\", 15), fg=\"red\")\r\n        self.player_name_label.pack()\r\n\r\n        self.player_name_entry = tk.Entry(master)\r\n        self.player_name_entry.pack()\r\n\r\n        self.add_button = tk.Button(master, text=\"Adicionar Jogador\", command=self.add_player)\r\n        self.add_button.pack()\r\n\r\n        self.remove_button = tk.Button(master, text=\"Remover Jogador\", command=self.remove_player)\r\n        self.remove_button.pack()\r\n\r\n        self.player_list_label = tk.Label(master, text=\"Jogadores adicionados:\", font=(\"times\", 15), fg=\"red\")\r\n        self.player_list_label.pack()\r\n\r\n        self.player_listbox = tk.Listbox(master)\r\n        self.player_listbox.pack()\r\n\r\n        self.start_button = tk.Button(master, text=\"Iniciar Jogo\", command=self.start_game)\r\n        self.start_button.pack()\r\n\r\n    def add_player(self):\r\n        player_name = self.player_name_entry.get()\r\n        if player_name not in self.player_names:\r\n            self.player_names.append(player_name)\r\n            self.player_name_entry.delete(0, tk.END)\r\n            self.show_players()\r\n            print(f\"Jogador {player_name} adicionado\")\r\n        else:\r\n            print(f\"Jogador {player_name} já adicionado\")\r\n\r\n\r\n    def remove_player(self):\r\n        player_name = self.player_name_entry.get()\r\n        if player_name in self.player_names:\r\n            self.player_names.remove(player_name)\r\n            self.player_name_entry.delete(0, tk.END)\r\n            self.show_players()\r\n            print(f\"Jogador {player_name} removido\")\r\n        else:\r\n            print(f\"Jogador {player_name} não encontrado\")\r\n\r\n    def show_players(self):\r\n        self.player_listbox.delete(0, tk.END)\r\n        for player in self.player_names:\r\n            self.player_listbox.insert(tk.END, player)\r\n\r\n    def start_game(self):\r\n        if len(self.player_names) < 2:\r\n            print(\"Número de jogadores insuficiente.\")\r\n            return\r\n\r\n        self.players = [Player(name) for name in self.player_names]\r\n        game = TestGame(self.players)\r\n        self.play_game(game)\r\n\r\n    def start_match(self):\r\n        match = Match(self.players)\r\n        return match\r\n    \r\n    def play_game(self, game):\r\n        print(\"Iniciando jogo.\")\r\n        print(\"Placar do jogo:\")\r\n        print(f\"Equipe 1: {game.score[Pair.PAIR_ONE_ID]}\")\r\n        print(f\"Equipe 2: {game.score[Pair.PAIR_TWO_ID]}\")\r\n        print()\r\n        while not game.is_over():\r\n            match = self.start_match()\r\n            self.play_match(match)\r\n        print(\"O jogo acabou.\")\r\n        print(f\"Vencedor do jogo: {game.winner.name}\")\r\n        print(\"Placar do jogo:\")\r\n        print(f\"Equipe 1: {game.score[Pair.PAIR_ONE_ID]}\")\r\n        print(f\"Equipe 2: {game.score[Pair.PAIR_TWO_ID]}\")\r\n        print()\r\n\r\n    def play_player(self, player, match):\r\n        print(f\"Vez de {player.name} jogar.\")\r\n        print(\"Cartas disponíveis:\")\r\n        for i, card in enumerate(player.hand.cards):\r\n            print(f\"{i + 1}: {card}\")\r\n        card_index = int(input(\"Digite o número da carta que deseja jogar: \")) - 1\r\n        if not player.hand.cards(card_index):\r\n            print(\"Número de carta inválido.\")\r\n            return\r\n        card = player.hand.cards.pop(card_index)\r\n        match.play_card(player, card)\r\n        print(f\"{player.name} jogou {card}.\")\r\n        \r\n\r\n        if match.is_over():\r\n            print(\"A rodada acabou.\")\r\n            print(f\"Vencedor da rodada: {match.winner.name}\")\r\n            print(\"Placar da partida:\")\r\n            print(f\"Equipe 1: {match.score[Pair.PAIR_ONE_ID]}\")\r\n            print(f\"Equipe 2: {match.score[Pair.PAIR_TWO_ID]}\")\r\n        \r\n        \r\n        else:\r\n            print(\"A rodada continua.\")\r\n            print(f\"Vez do próximo jogador.\")\r\n        print()\r\n    \r\n    def play_match(self, match):\r\n        print(\"Iniciando partida.\")\r\n        print(\"Placar da partida:\")\r\n        print(f\"Equipe 1: {match.score[Pair.PAIR_ONE_ID]}\")\r\n        print(f\"Equipe 2: {match.score[Pair.PAIR_TWO_ID]}\")\r\n        print()\r\n\r\n        while not match.is_over():\r\n            for player in match.players:\r\n                self.play_player(player, match)\r\n\r\n        print(\"A partida acabou.\")\r\n        print(f\"Vencedor da partida: {match.winner.name}\")\r\n        print(\"Placar da partida:\")\r\n        print(f\"Equipe 1: {match.score[Pair.PAIR_ONE_ID]}\")\r\n        print(f\"Equipe 2: {match.score[Pair.PAIR_TWO_ID]}\")\r\n        print()\r\n\r\n        print(\"Iniciando nova partida.\")\r\n        print()\r\n\r\nclass TrucoJogarCartas:\r\n    def __init__(self, master, player_names):\r\n        self.master = master\r\n        master.title(\"Truco Game - Jogar Cartas\")\r\n\r\n        self.player_names = player_names\r\n        self.players = []\r\n\r\n        self.label_cards = tk.Label(master, text=\"Cartas de cada jogador:\", font=(\"times\", 15), fg=\"red\")\r\n        self.label_cards.pack()\r\n\r\n        self.listbox_players = tk.Listbox(master)\r\n        self.listbox_players.pack()\r\n\r\n        self.show_cards()\r\n\r\n    def show_cards(self):\r\n        self.listbox_players.delete(0, tk.END)\r\n        for player_name in self.player_names:\r\n            self.listbox_players.insert(tk.END, f\"Cartas de {player_name}:\")\r\n            cards = [\"Carta 1\", \"Carta 2\", \"Carta 3\"]\r\n            for card in cards:\r\n                self.listbox_players.insert(tk.END, card)\r\n\r\nclass TrucoCartas:\r\n    def __init__(self, master, player_names):\r\n        self.master = master\r\n        master.title(\"Truco Game - Cartas\")\r\n\r\n        self.player_names = player_names\r\n        self.players = []\r\n\r\n        self.label_cards = tk.Label(master, text=\"Cartas de cada jogador:\", font=(\"times\", 15), fg=\"red\")\r\n        self.label_cards.pack()\r\n\r\n        self.listbox_players = tk.Listbox(master)\r\n        self.listbox_players.pack()\r\n\r\n        self.show_cards()\r\n\r\n    def show_cards(self):\r\n        self.listbox_players.delete(0, tk.END)\r\n        for player_name in self.player_names:\r\n            self.listbox_players.insert(tk.END, f\"Cartas de {player_name}:\")\r\n            cards = [\"Carta 1\", \"Carta 2\", \"Carta 3\"]\r\n            for card in cards:\r\n                self.listbox_players.insert(tk.END, card)\r\n\r\nclass TrucoRodadas:\r\n    def __init__(self, master, player_names):\r\n        self.master = master\r\n        master.title(\"Truco Game - Rodadas\")\r\n\r\n        self.player_names = player_names\r\n        self.players = []\r\n\r\n        self.label_rounds = tk.Label(master, text=\"Rodadas de cada jogador:\", font=(\"times\", 15), fg=\"red\")\r\n        self.label_rounds.pack()\r\n\r\n        self.listbox_players = tk.Listbox(master)\r\n        self.listbox_players.pack()\r\n\r\n        self.show_rounds()\r\n\r\n    def show_rounds(self):\r\n        self.listbox_players.delete(0, tk.END)\r\n        for player_name in self.player_names:\r\n            self.listbox_players.insert(tk.END, f\"Rodadas de {player_name}:\")\r\n            rounds = [\"Rodada 1\", \"Rodada 2\", \"Rodada 3\"]\r\n            for round in rounds:\r\n                self.listbox_players.insert(tk.END, round)\r\n\r\n\r\nclass TrucoPlacar:\r\n    def __init__(self, master, score, player_names):\r\n        self.master = master\r\n        self.score = score\r\n        self.player_names = player_names\r\n        self.players = [Player(name) for name in self.player_names]\r\n        master.title(\"Truco Game - Placar\")\r\n\r\n    def start_game(self):\r\n        self.players = [Player(name) for name in self.player_names]\r\n        game = TestGame()\r\n\r\nif __name__ == \"__main__\":\r\n    root = tk.Tk()\r\n    my_gui = TrucoJogador(root)\r\n    root.mainloop()\r\n\r\n    root = tk.Tk()\r\n    my_gui = TrucoJogarCartas(root, [\"Jogador 1\", \"Jogador 2\", \"Jogador 3\", \"Jogador 4\"])\r\n    root.mainloop()\r\n\r\n    root = tk.Tk()\r\n    my_gui = TrucoCartas(root, [\"Jogador 1\", \"Jogador 2\", \"Jogador 3\", \"Jogador 4\"])\r\n    root.mainloop()\r\n\r\n    root = tk.Tk()\r\n    my_gui = TrucoRodadas(root, [\"Jogador 1\", \"Jogador 2\", \"Jogador 3\", \"Jogador 4\"])\r\n    root.mainloop()\r\n\r\n    root = tk.Tk()\r\n    my_gui = TrucoPlacar(root, [0, 0], [\"Jogador 1\", \"Jogador 2\", \"Jogador 3\", \"Jogador 4\"])\r\n    root.mainloop()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/aiketruco_main.py b/aiketruco_main.py
--- a/aiketruco_main.py	(revision 7fa5cde1421c15adb3d08e2b5e55b117a1640647)
+++ b/aiketruco_main.py	(date 1714661067267)
@@ -1,28 +1,20 @@
+# Author : Yasmin Souza-8764
 import tkinter as tk
-from truco_game import Pair, Hand, CardCheck, Card, Player, Match
+
 from truco_regras import TestGame
 
 
-class Match:
-    def __init__(self, players):
-        self.players = players
-        self.score = {Pair.PAIR_ONE_ID: 0, Pair.PAIR_TWO_ID: 0}
-        self.rounds = []
-        self.winner = None
-    
-    def is_over(self):
-        return self.score[Pair.PAIR_ONE_ID] == 2 or self.score[Pair.PAIR_TWO_ID] == 2
-
 class TrucoJogador:
+    # Classe para a tela de adicionar e remover jogadores e ir para a tela de jogar cartas
     def __init__(self, master):
         self.master = master
+        self.frame = tk.Frame(self.master)
+
         master.title("Truco Game - Jogadores")
-
-        self.player_names = []
         self.players = []
 
-        self.player_name_label = tk.Label(master, text="Digite o nome dos jogadores (mínimo 2):", font=("times", 15), fg="red")
-        self.player_name_label.pack()
+        self.label = tk.Label(master, text="Digite os nomes dos jogadores:", font=("times", 15), fg="red")
+        self.label.pack()
 
         self.player_name_entry = tk.Entry(master)
         self.player_name_entry.pack()
@@ -33,8 +25,8 @@
         self.remove_button = tk.Button(master, text="Remover Jogador", command=self.remove_player)
         self.remove_button.pack()
 
-        self.player_list_label = tk.Label(master, text="Jogadores adicionados:", font=("times", 15), fg="red")
-        self.player_list_label.pack()
+        self.label_players = tk.Label(master, text="Jogadores adicionados:", font=("times", 15), fg="red")
+        self.label_players.pack()
 
         self.player_listbox = tk.Listbox(master)
         self.player_listbox.pack()
@@ -42,6 +34,12 @@
         self.start_button = tk.Button(master, text="Iniciar Jogo", command=self.start_game)
         self.start_button.pack()
 
+        self.entry = tk.Entry(self.frame)
+        self.entry.pack()
+
+        self.player_names = []
+        self.player_cards = []
+
     def add_player(self):
         player_name = self.player_name_entry.get()
         if player_name not in self.player_names:
@@ -52,7 +50,6 @@
         else:
             print(f"Jogador {player_name} já adicionado")
 
-
     def remove_player(self):
         player_name = self.player_name_entry.get()
         if player_name in self.player_names:
@@ -61,193 +58,106 @@
             self.show_players()
             print(f"Jogador {player_name} removido")
         else:
-            print(f"Jogador {player_name} não encontrado")
+            print(f"Jogador {player_name} não está na lista")
 
     def show_players(self):
         self.player_listbox.delete(0, tk.END)
         for player in self.player_names:
             self.player_listbox.insert(tk.END, player)
 
-    def start_game(self):
-        if len(self.player_names) < 2:
-            print("Número de jogadores insuficiente.")
-            return
+    def start_game(self, test=False, player_names=None):
+        if test:
+            test_game = TestGame(player_names)
+            test_game.play()
+        else:
+            if len(self.player_names) < 2:
+                print("Adicione pelo menos 2 jogadores para iniciar o jogo.")
+                return
 
-        self.players = [Player(name) for name in self.player_names]
-        game = TestGame(self.players)
-        self.play_game(game)
+            self.master.withdraw()
+            cartas_screen = tk.Toplevel(self.master)
+            app = TrucoJogarCartas(cartas_screen, self.player_names, self.player_cards)
 
-    def start_match(self):
-        match = Match(self.players)
-        return match
-    
-    def play_game(self, game):
-        print("Iniciando jogo.")
-        print("Placar do jogo:")
-        print(f"Equipe 1: {game.score[Pair.PAIR_ONE_ID]}")
-        print(f"Equipe 2: {game.score[Pair.PAIR_TWO_ID]}")
-        print()
-        while not game.is_over():
-            match = self.start_match()
-            self.play_match(match)
-        print("O jogo acabou.")
-        print(f"Vencedor do jogo: {game.winner.name}")
-        print("Placar do jogo:")
-        print(f"Equipe 1: {game.score[Pair.PAIR_ONE_ID]}")
-        print(f"Equipe 2: {game.score[Pair.PAIR_TWO_ID]}")
-        print()
 
-    def play_player(self, player, match):
-        print(f"Vez de {player.name} jogar.")
-        print("Cartas disponíveis:")
-        for i, card in enumerate(player.hand.cards):
-            print(f"{i + 1}: {card}")
-        card_index = int(input("Digite o número da carta que deseja jogar: ")) - 1
-        if not player.hand.cards(card_index):
-            print("Número de carta inválido.")
-            return
-        card = player.hand.cards.pop(card_index)
-        match.play_card(player, card)
-        print(f"{player.name} jogou {card}.")
-        
-
-        if match.is_over():
-            print("A rodada acabou.")
-            print(f"Vencedor da rodada: {match.winner.name}")
-            print("Placar da partida:")
-            print(f"Equipe 1: {match.score[Pair.PAIR_ONE_ID]}")
-            print(f"Equipe 2: {match.score[Pair.PAIR_TWO_ID]}")
-        
-        
-        else:
-            print("A rodada continua.")
-            print(f"Vez do próximo jogador.")
-        print()
-    
-    def play_match(self, match):
-        print("Iniciando partida.")
-        print("Placar da partida:")
-        print(f"Equipe 1: {match.score[Pair.PAIR_ONE_ID]}")
-        print(f"Equipe 2: {match.score[Pair.PAIR_TWO_ID]}")
-        print()
+def on_card_select(self, event):
+    print("on_card_select called")  # Add this line
+    widget = event.widget
+    selection = widget.curselection()
+    if selection:  # Check if the selection is not empty
+        index = int(selection[0])
+        # Rest of your code
+    else:
+        print("No item selected")
 
-        while not match.is_over():
-            for player in match.players:
-                self.play_player(player, match)
-
-        print("A partida acabou.")
-        print(f"Vencedor da partida: {match.winner.name}")
-        print("Placar da partida:")
-        print(f"Equipe 1: {match.score[Pair.PAIR_ONE_ID]}")
-        print(f"Equipe 2: {match.score[Pair.PAIR_TWO_ID]}")
-        print()
-
-        print("Iniciando nova partida.")
-        print()
 
 class TrucoJogarCartas:
-    def __init__(self, master, player_names):
-        self.master = master
-        master.title("Truco Game - Jogar Cartas")
+    def __init__(self, master, player_names, player_cards):
+        if player_names:
+            self.master = master
+            master.title("Truco Game - Jogar Cartas")
 
-        self.player_names = player_names
-        self.players = []
+            self.player_names = player_names
+            self.player_cards = player_cards
 
-        self.label_cards = tk.Label(master, text="Cartas de cada jogador:", font=("times", 15), fg="red")
-        self.label_cards.pack()
+            self.label_players = tk.Label(master, text="Cartas de cada jogador:", font=("times", 15), fg="red")
+            self.label_players.pack()
 
-        self.listbox_players = tk.Listbox(master)
-        self.listbox_players.pack()
+            self.listbox_players = tk.Listbox(master)
+            self.listbox_players.pack()
 
-        self.show_cards()
+            self.show_cards()  # Call show_cards before binding the event
+
+            self.spinbox = tk.Spinbox(master, from_=1, to=3, width=55, font=("times", 15))
+            self.spinbox.pack()
+
+            self.play_button = tk.Button(master, text="Jogar Carta", command=self.play_player)
+            self.play_button.pack()
+        else:
+            print("Nenhum jogador adicionado")
 
     def show_cards(self):
         self.listbox_players.delete(0, tk.END)
-        for player_name in self.player_names:
+        for player_index in range(len(self.player_names)):
+            if player_index >= len(self.player_cards):
+                continue
+            player_name = self.player_names[player_index]
             self.listbox_players.insert(tk.END, f"Cartas de {player_name}:")
-            cards = ["Carta 1", "Carta 2", "Carta 3"]
+            cards = self.player_cards[player_index]
             for card in cards:
                 self.listbox_players.insert(tk.END, card)
-
-class TrucoCartas:
-    def __init__(self, master, player_names):
-        self.master = master
-        master.title("Truco Game - Cartas")
-
-        self.player_names = player_names
-        self.players = []
-
-        self.label_cards = tk.Label(master, text="Cartas de cada jogador:", font=("times", 15), fg="red")
-        self.label_cards.pack()
+            # Add a check to see if the cards are being added
+            if not cards:
+                print(f"No cards for player {player_name}")
 
-        self.listbox_players = tk.Listbox(master)
-        self.listbox_players.pack()
-
-        self.show_cards()
-
-    def show_cards(self):
-        self.listbox_players.delete(0, tk.END)
-        for player_name in self.player_names:
-            self.listbox_players.insert(tk.END, f"Cartas de {player_name}:")
-            cards = ["Carta 1", "Carta 2", "Carta 3"]
-            for card in cards:
-                self.listbox_players.insert(tk.END, card)
+    def play_player(self):
+        if self.listbox_players.curselection():  # Check if a card is selected
+            player_index = self.listbox_players.curselection()[0]
+            player_name = self.player_names[player_index]
+            card_index = self.spinbox.get()
+            card = self.player_cards[player_index][int(card_index) - 1]
+            print(f"Jogador {player_name} jogou a carta {card}")
+            self.player_cards[player_index].remove(card)
+            self.show_cards()
+            if len(self.player_cards[player_index]) == 0:
+                print(f"Jogador {player_name} não tem mais cartas")
+                self.player_names.remove(player_name)
+                self.player_cards.pop(player_index)
+                self.show_cards()
+                if len(self.player_names) == 1:
+                    print(f"Jogador {self.player_names[0]} ganhou o jogo!")
+                    self.master.withdraw()
+                    cartas_screen = tk.Toplevel(self.master)
+                    app = TrucoJogarCartas(cartas_screen, self.player_names, self.player_cards)
+                else:
+                    print("Próximo jogador")
+            else:
+                print(f"Próximo jogador")
+        else:
+            print("Selecione uma carta para jogar.")
+            return
 
-class TrucoRodadas:
-    def __init__(self, master, player_names):
-        self.master = master
-        master.title("Truco Game - Rodadas")
-
-        self.player_names = player_names
-        self.players = []
-
-        self.label_rounds = tk.Label(master, text="Rodadas de cada jogador:", font=("times", 15), fg="red")
-        self.label_rounds.pack()
-
-        self.listbox_players = tk.Listbox(master)
-        self.listbox_players.pack()
-
-        self.show_rounds()
-
-    def show_rounds(self):
-        self.listbox_players.delete(0, tk.END)
-        for player_name in self.player_names:
-            self.listbox_players.insert(tk.END, f"Rodadas de {player_name}:")
-            rounds = ["Rodada 1", "Rodada 2", "Rodada 3"]
-            for round in rounds:
-                self.listbox_players.insert(tk.END, round)
-
-
-class TrucoPlacar:
-    def __init__(self, master, score, player_names):
-        self.master = master
-        self.score = score
-        self.player_names = player_names
-        self.players = [Player(name) for name in self.player_names]
-        master.title("Truco Game - Placar")
-
-    def start_game(self):
-        self.players = [Player(name) for name in self.player_names]
-        game = TestGame()
 
 if __name__ == "__main__":
     root = tk.Tk()
     my_gui = TrucoJogador(root)
-    root.mainloop()
-
-    root = tk.Tk()
-    my_gui = TrucoJogarCartas(root, ["Jogador 1", "Jogador 2", "Jogador 3", "Jogador 4"])
-    root.mainloop()
-
-    root = tk.Tk()
-    my_gui = TrucoCartas(root, ["Jogador 1", "Jogador 2", "Jogador 3", "Jogador 4"])
-    root.mainloop()
-
-    root = tk.Tk()
-    my_gui = TrucoRodadas(root, ["Jogador 1", "Jogador 2", "Jogador 3", "Jogador 4"])
-    root.mainloop()
-
-    root = tk.Tk()
-    my_gui = TrucoPlacar(root, [0, 0], ["Jogador 1", "Jogador 2", "Jogador 3", "Jogador 4"])
-    root.mainloop()
-
+    root.mainloop()
\ No newline at end of file
